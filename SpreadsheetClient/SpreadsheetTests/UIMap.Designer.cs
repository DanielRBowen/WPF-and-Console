// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by coded UI test builder.
//      Version: 10.0.0.0
//
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------

namespace SpreadsheetTests
{
    using System;
    using System.CodeDom.Compiler;
    using System.Collections.Generic;
    using System.Drawing;
    using System.Text.RegularExpressions;
    using System.Windows.Input;
    using Microsoft.VisualStudio.TestTools.UITest.Extension;
    using Microsoft.VisualStudio.TestTools.UITesting;
    using Microsoft.VisualStudio.TestTools.UITesting.WinControls;
    using Microsoft.VisualStudio.TestTools.UITesting.WpfControls;
    using Microsoft.VisualStudio.TestTools.UnitTesting;
    using Keyboard = Microsoft.VisualStudio.TestTools.UITesting.Keyboard;
    using Mouse = Microsoft.VisualStudio.TestTools.UITesting.Mouse;
    using MouseButtons = System.Windows.Forms.MouseButtons;
    
    
    [GeneratedCode("Coded UITest Builder", "10.0.40219.415")]
    public partial class UIMap
    {
        /// <summary>
        /// NewTest
        /// </summary>
        public void NewTest()
        {
            #region Variable Declarations
            WpfMenuItem uINewMenuItem = this.UIUntitledSpreadSheetWindow.UIItemMenu.UIFileMenuItem.UINewMenuItem;
            #endregion

            // Click 'File' -> 'New' menu item
            Mouse.Click(uINewMenuItem, new Point(109, 10));
        }
        
        /// <summary>
        /// OpenTest
        /// </summary>
        public void OpenTest()
        {
            #region Variable Declarations
            WpfMenuItem uIOpenMenuItem = this.UIUntitledSpreadSheetWindow.UIItemMenu.UIFileMenuItem.UIOpenMenuItem;
            WinTreeItem uIProjectsTreeItem = this.UIOpenWindow.UITreeViewWindow.UITreeViewTree.UIFavoritesTreeItem.UIProjectsTreeItem;
            WinEdit uINameEdit = this.UIOpenWindow.UIItemWindow.UISpreadsheetPanelListItem.UINameEdit;
            WinEdit uINameEdit1 = this.UIOpenWindow.UIItemWindow1.UIDemossListItem.UINameEdit;
            WinButton uIOpenButton = this.UIOpenWindow.UIOpenWindow1.UIOpenButton;
            WpfMenuItem uICloseMenuItem = this.UIDemoSpreadSheetWindow.UIItemMenu.UIFileMenuItem.UICloseMenuItem;
            WinButton uINOButton = this.UIDemoSpreadSheetWindow1.UINOWindow.UINOButton;
            #endregion

            // Click 'File' -> 'Open…' menu item
            Mouse.Click(uIOpenMenuItem, new Point(93, 15));

            // Click 'Favorites' -> 'Projects' tree item
            Mouse.Click(uIProjectsTreeItem, new Point(31, 11));

            // Double-Click 'Name' text box
            Mouse.DoubleClick(uINameEdit, new Point(129, 10));

            // Click 'Name' text box
            Mouse.Click(uINameEdit1, new Point(37, 13));

            // Click '&Open' button
            Mouse.Click(uIOpenButton, new Point(51, 12));

            // Click 'File' -> 'Close' menu item
            Mouse.Click(uICloseMenuItem, new Point(49, 9));

            // Click '&No' button
            Mouse.Click(uINOButton, new Point(54, 14));
        }
        
        /// <summary>
        /// SaveAsTest - Use 'SaveAsTestParams' to pass parameters into this method.
        /// </summary>
        public void SaveAsTest()
        {
            #region Variable Declarations
            WpfMenuItem uISaveAsMenuItem = this.UITestSpreadSheetWindow.UIItemMenu.UIFileMenuItem.UISaveAsMenuItem;
            WinComboBox uIFilenameComboBox = this.UISaveAsWindow.UIDetailsPanePane.UIFilenameComboBox;
            WinEdit uIFilenameEdit = this.UISaveAsWindow.UIItemWindow.UIFilenameEdit;
            WinButton uIYesButton = this.UIYesWindow.UIYesButton;
            #endregion

            // Click 'File' -> 'Save As…' menu item
            Mouse.Click(uISaveAsMenuItem, new Point(113, 8));

            // Select 'test.ss' in 'File name:' combo box
            uIFilenameComboBox.EditableItem = this.SaveAsTestParams.UIFilenameComboBoxEditableItem;

            // Type '{Enter}' in 'File name:' text box
            Keyboard.SendKeys(uIFilenameEdit, this.SaveAsTestParams.UIFilenameEditSendKeys, ModifierKeys.None);

            // Click '&Yes' button
            Mouse.Click(uIYesButton, new Point(25, 21));
        }
        
        /// <summary>
        /// HelpTest
        /// </summary>
        public void HelpTest()
        {
            #region Variable Declarations
            WpfMenuItem uIHelpMenuItem = this.UITestSpreadSheetWindow.UIItemMenu.UIHelpMenuItem;
            WpfButton uIOKButton = this.UIHelpWindow.UIOKButton;
            #endregion

            // Click 'Help…' menu item
            Mouse.Click(uIHelpMenuItem, new Point(16, 9));

            // Click 'OK' button
            Mouse.Click(uIOKButton, new Point(65, 9));
        }
        
        /// <summary>
        /// CloseTest
        /// </summary>
        public void CloseTest()
        {
            #region Variable Declarations
            WpfMenuItem uICloseMenuItem = this.UITestSpreadSheetWindow.UIItemMenu.UIFileMenuItem.UICloseMenuItem;
            #endregion

            // Click 'File' -> 'Close' menu item
            Mouse.Click(uICloseMenuItem, new Point(68, 13));
        }
        
        #region Properties
        public virtual SaveAsTestParams SaveAsTestParams
        {
            get
            {
                if ((this.mSaveAsTestParams == null))
                {
                    this.mSaveAsTestParams = new SaveAsTestParams();
                }
                return this.mSaveAsTestParams;
            }
        }
        
        public UIUntitledSpreadSheetWindow UIUntitledSpreadSheetWindow
        {
            get
            {
                if ((this.mUIUntitledSpreadSheetWindow == null))
                {
                    this.mUIUntitledSpreadSheetWindow = new UIUntitledSpreadSheetWindow();
                }
                return this.mUIUntitledSpreadSheetWindow;
            }
        }
        
        public UIOpenWindow UIOpenWindow
        {
            get
            {
                if ((this.mUIOpenWindow == null))
                {
                    this.mUIOpenWindow = new UIOpenWindow();
                }
                return this.mUIOpenWindow;
            }
        }
        
        public UIDemoSpreadSheetWindow UIDemoSpreadSheetWindow
        {
            get
            {
                if ((this.mUIDemoSpreadSheetWindow == null))
                {
                    this.mUIDemoSpreadSheetWindow = new UIDemoSpreadSheetWindow();
                }
                return this.mUIDemoSpreadSheetWindow;
            }
        }
        
        public UIDemoSpreadSheetWindow1 UIDemoSpreadSheetWindow1
        {
            get
            {
                if ((this.mUIDemoSpreadSheetWindow1 == null))
                {
                    this.mUIDemoSpreadSheetWindow1 = new UIDemoSpreadSheetWindow1();
                }
                return this.mUIDemoSpreadSheetWindow1;
            }
        }
        
        public UITestSpreadSheetWindow UITestSpreadSheetWindow
        {
            get
            {
                if ((this.mUITestSpreadSheetWindow == null))
                {
                    this.mUITestSpreadSheetWindow = new UITestSpreadSheetWindow();
                }
                return this.mUITestSpreadSheetWindow;
            }
        }
        
        public UISaveAsWindow UISaveAsWindow
        {
            get
            {
                if ((this.mUISaveAsWindow == null))
                {
                    this.mUISaveAsWindow = new UISaveAsWindow();
                }
                return this.mUISaveAsWindow;
            }
        }
        
        public UIYesWindow UIYesWindow
        {
            get
            {
                if ((this.mUIYesWindow == null))
                {
                    this.mUIYesWindow = new UIYesWindow();
                }
                return this.mUIYesWindow;
            }
        }
        
        public UIHelpWindow UIHelpWindow
        {
            get
            {
                if ((this.mUIHelpWindow == null))
                {
                    this.mUIHelpWindow = new UIHelpWindow();
                }
                return this.mUIHelpWindow;
            }
        }
        #endregion
        
        #region Fields
        private SaveAsTestParams mSaveAsTestParams;
        
        private UIUntitledSpreadSheetWindow mUIUntitledSpreadSheetWindow;
        
        private UIOpenWindow mUIOpenWindow;
        
        private UIDemoSpreadSheetWindow mUIDemoSpreadSheetWindow;
        
        private UIDemoSpreadSheetWindow1 mUIDemoSpreadSheetWindow1;
        
        private UITestSpreadSheetWindow mUITestSpreadSheetWindow;
        
        private UISaveAsWindow mUISaveAsWindow;
        
        private UIYesWindow mUIYesWindow;
        
        private UIHelpWindow mUIHelpWindow;
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'SaveAsTest'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "10.0.40219.415")]
    public class SaveAsTestParams
    {
        
        #region Fields
        /// <summary>
        /// Select 'test.ss' in 'File name:' combo box
        /// </summary>
        public string UIFilenameComboBoxEditableItem = "test.ss";
        
        /// <summary>
        /// Type '{Enter}' in 'File name:' text box
        /// </summary>
        public string UIFilenameEditSendKeys = "{Enter}";
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.40219.415")]
    public class UIUntitledSpreadSheetWindow : WpfWindow
    {
        
        public UIUntitledSpreadSheetWindow()
        {
            #region Search Criteria
            this.SearchProperties[WpfWindow.PropertyNames.Name] = "Untitled – Spread Sheet";
            this.SearchProperties.Add(new PropertyExpression(WpfWindow.PropertyNames.ClassName, "HwndWrapper", PropertyExpressionOperator.Contains));
            this.WindowTitles.Add("Untitled – Spread Sheet");
            #endregion
        }
        
        #region Properties
        public UIItemMenu UIItemMenu
        {
            get
            {
                if ((this.mUIItemMenu == null))
                {
                    this.mUIItemMenu = new UIItemMenu(this);
                }
                return this.mUIItemMenu;
            }
        }
        #endregion
        
        #region Fields
        private UIItemMenu mUIItemMenu;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.40219.415")]
    public class UIItemMenu : WpfMenu
    {
        
        public UIItemMenu(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.WindowTitles.Add("Untitled – Spread Sheet");
            #endregion
        }
        
        #region Properties
        public UIFileMenuItem UIFileMenuItem
        {
            get
            {
                if ((this.mUIFileMenuItem == null))
                {
                    this.mUIFileMenuItem = new UIFileMenuItem(this);
                }
                return this.mUIFileMenuItem;
            }
        }
        #endregion
        
        #region Fields
        private UIFileMenuItem mUIFileMenuItem;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.40219.415")]
    public class UIFileMenuItem : WpfMenuItem
    {
        
        public UIFileMenuItem(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfMenuItem.PropertyNames.Name] = "File";
            this.WindowTitles.Add("Untitled – Spread Sheet");
            #endregion
        }
        
        #region Properties
        public WpfMenuItem UINewMenuItem
        {
            get
            {
                if ((this.mUINewMenuItem == null))
                {
                    this.mUINewMenuItem = new WpfMenuItem(this);
                    #region Search Criteria
                    this.mUINewMenuItem.SearchProperties[WpfMenuItem.PropertyNames.Name] = "New";
                    this.mUINewMenuItem.SearchConfigurations.Add(SearchConfiguration.ExpandWhileSearching);
                    this.mUINewMenuItem.WindowTitles.Add("Untitled – Spread Sheet");
                    #endregion
                }
                return this.mUINewMenuItem;
            }
        }
        
        public WpfMenuItem UIOpenMenuItem
        {
            get
            {
                if ((this.mUIOpenMenuItem == null))
                {
                    this.mUIOpenMenuItem = new WpfMenuItem(this);
                    #region Search Criteria
                    this.mUIOpenMenuItem.SearchProperties[WpfMenuItem.PropertyNames.Name] = "Open…";
                    this.mUIOpenMenuItem.SearchConfigurations.Add(SearchConfiguration.ExpandWhileSearching);
                    this.mUIOpenMenuItem.WindowTitles.Add("Untitled – Spread Sheet");
                    #endregion
                }
                return this.mUIOpenMenuItem;
            }
        }
        #endregion
        
        #region Fields
        private WpfMenuItem mUINewMenuItem;
        
        private WpfMenuItem mUIOpenMenuItem;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.40219.415")]
    public class UIOpenWindow : WinWindow
    {
        
        public UIOpenWindow()
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.Name] = "Open";
            this.SearchProperties[WinWindow.PropertyNames.ClassName] = "#32770";
            this.WindowTitles.Add("Open");
            #endregion
        }
        
        #region Properties
        public UITreeViewWindow UITreeViewWindow
        {
            get
            {
                if ((this.mUITreeViewWindow == null))
                {
                    this.mUITreeViewWindow = new UITreeViewWindow(this);
                }
                return this.mUITreeViewWindow;
            }
        }
        
        public UIItemWindow UIItemWindow
        {
            get
            {
                if ((this.mUIItemWindow == null))
                {
                    this.mUIItemWindow = new UIItemWindow(this);
                }
                return this.mUIItemWindow;
            }
        }
        
        public UIItemWindow1 UIItemWindow1
        {
            get
            {
                if ((this.mUIItemWindow1 == null))
                {
                    this.mUIItemWindow1 = new UIItemWindow1(this);
                }
                return this.mUIItemWindow1;
            }
        }
        
        public UIOpenWindow1 UIOpenWindow1
        {
            get
            {
                if ((this.mUIOpenWindow1 == null))
                {
                    this.mUIOpenWindow1 = new UIOpenWindow1(this);
                }
                return this.mUIOpenWindow1;
            }
        }
        #endregion
        
        #region Fields
        private UITreeViewWindow mUITreeViewWindow;
        
        private UIItemWindow mUIItemWindow;
        
        private UIItemWindow1 mUIItemWindow1;
        
        private UIOpenWindow1 mUIOpenWindow1;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.40219.415")]
    public class UITreeViewWindow : WinWindow
    {
        
        public UITreeViewWindow(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlId] = "100";
            this.WindowTitles.Add("Open");
            #endregion
        }
        
        #region Properties
        public UITreeViewTree UITreeViewTree
        {
            get
            {
                if ((this.mUITreeViewTree == null))
                {
                    this.mUITreeViewTree = new UITreeViewTree(this);
                }
                return this.mUITreeViewTree;
            }
        }
        #endregion
        
        #region Fields
        private UITreeViewTree mUITreeViewTree;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.40219.415")]
    public class UITreeViewTree : WinTree
    {
        
        public UITreeViewTree(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinTree.PropertyNames.Name] = "Namespace Tree Control";
            this.WindowTitles.Add("Open");
            #endregion
        }
        
        #region Properties
        public UIFavoritesTreeItem UIFavoritesTreeItem
        {
            get
            {
                if ((this.mUIFavoritesTreeItem == null))
                {
                    this.mUIFavoritesTreeItem = new UIFavoritesTreeItem(this);
                }
                return this.mUIFavoritesTreeItem;
            }
        }
        #endregion
        
        #region Fields
        private UIFavoritesTreeItem mUIFavoritesTreeItem;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.40219.415")]
    public class UIFavoritesTreeItem : WinTreeItem
    {
        
        public UIFavoritesTreeItem(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinTreeItem.PropertyNames.Name] = "Favorites";
            this.SearchProperties["Value"] = "0";
            this.WindowTitles.Add("Open");
            #endregion
        }
        
        #region Properties
        public WinTreeItem UIProjectsTreeItem
        {
            get
            {
                if ((this.mUIProjectsTreeItem == null))
                {
                    this.mUIProjectsTreeItem = new WinTreeItem(this);
                    #region Search Criteria
                    this.mUIProjectsTreeItem.SearchProperties[WinTreeItem.PropertyNames.Name] = "Projects";
                    this.mUIProjectsTreeItem.SearchProperties["Value"] = "1";
                    this.mUIProjectsTreeItem.SearchConfigurations.Add(SearchConfiguration.ExpandWhileSearching);
                    this.mUIProjectsTreeItem.SearchConfigurations.Add(SearchConfiguration.NextSibling);
                    this.mUIProjectsTreeItem.WindowTitles.Add("Open");
                    #endregion
                }
                return this.mUIProjectsTreeItem;
            }
        }
        #endregion
        
        #region Fields
        private WinTreeItem mUIProjectsTreeItem;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.40219.415")]
    public class UIItemWindow : WinWindow
    {
        
        public UIItemWindow(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.AccessibleName] = "Items View";
            this.SearchProperties[WinWindow.PropertyNames.ClassName] = "DirectUIHWND";
            this.WindowTitles.Add("Open");
            #endregion
        }
        
        #region Properties
        public UISpreadsheetPanelListItem UISpreadsheetPanelListItem
        {
            get
            {
                if ((this.mUISpreadsheetPanelListItem == null))
                {
                    this.mUISpreadsheetPanelListItem = new UISpreadsheetPanelListItem(this);
                }
                return this.mUISpreadsheetPanelListItem;
            }
        }
        #endregion
        
        #region Fields
        private UISpreadsheetPanelListItem mUISpreadsheetPanelListItem;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.40219.415")]
    public class UISpreadsheetPanelListItem : WinListItem
    {
        
        public UISpreadsheetPanelListItem(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinListItem.PropertyNames.Name] = "SpreadsheetPanel";
            this.WindowTitles.Add("Open");
            #endregion
        }
        
        #region Properties
        public WinEdit UINameEdit
        {
            get
            {
                if ((this.mUINameEdit == null))
                {
                    this.mUINameEdit = new WinEdit(this);
                    #region Search Criteria
                    this.mUINameEdit.SearchProperties[WinEdit.PropertyNames.Name] = "Name";
                    this.mUINameEdit.WindowTitles.Add("Open");
                    #endregion
                }
                return this.mUINameEdit;
            }
        }
        #endregion
        
        #region Fields
        private WinEdit mUINameEdit;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.40219.415")]
    public class UIItemWindow1 : WinWindow
    {
        
        public UIItemWindow1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.AccessibleName] = "Items View";
            this.SearchProperties[WinWindow.PropertyNames.ClassName] = "DirectUIHWND";
            this.WindowTitles.Add("Open");
            #endregion
        }
        
        #region Properties
        public UIDemossListItem UIDemossListItem
        {
            get
            {
                if ((this.mUIDemossListItem == null))
                {
                    this.mUIDemossListItem = new UIDemossListItem(this);
                }
                return this.mUIDemossListItem;
            }
        }
        #endregion
        
        #region Fields
        private UIDemossListItem mUIDemossListItem;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.40219.415")]
    public class UIDemossListItem : WinListItem
    {
        
        public UIDemossListItem(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinListItem.PropertyNames.Name] = "demo.ss";
            this.WindowTitles.Add("Open");
            #endregion
        }
        
        #region Properties
        public WinEdit UINameEdit
        {
            get
            {
                if ((this.mUINameEdit == null))
                {
                    this.mUINameEdit = new WinEdit(this);
                    #region Search Criteria
                    this.mUINameEdit.SearchProperties[WinEdit.PropertyNames.Name] = "Name";
                    this.mUINameEdit.WindowTitles.Add("Open");
                    #endregion
                }
                return this.mUINameEdit;
            }
        }
        #endregion
        
        #region Fields
        private WinEdit mUINameEdit;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.40219.415")]
    public class UIOpenWindow1 : WinWindow
    {
        
        public UIOpenWindow1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlId] = "1";
            this.WindowTitles.Add("Open");
            #endregion
        }
        
        #region Properties
        public WinButton UIOpenButton
        {
            get
            {
                if ((this.mUIOpenButton == null))
                {
                    this.mUIOpenButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIOpenButton.SearchProperties[WinButton.PropertyNames.Name] = "Open";
                    this.mUIOpenButton.WindowTitles.Add("Open");
                    #endregion
                }
                return this.mUIOpenButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUIOpenButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.40219.415")]
    public class UIDemoSpreadSheetWindow : WpfWindow
    {
        
        public UIDemoSpreadSheetWindow()
        {
            #region Search Criteria
            this.SearchProperties[WpfWindow.PropertyNames.Name] = "demo – Spread Sheet";
            this.SearchProperties.Add(new PropertyExpression(WpfWindow.PropertyNames.ClassName, "HwndWrapper", PropertyExpressionOperator.Contains));
            this.WindowTitles.Add("demo – Spread Sheet");
            #endregion
        }
        
        #region Properties
        public UIItemMenu1 UIItemMenu
        {
            get
            {
                if ((this.mUIItemMenu == null))
                {
                    this.mUIItemMenu = new UIItemMenu1(this);
                }
                return this.mUIItemMenu;
            }
        }
        #endregion
        
        #region Fields
        private UIItemMenu1 mUIItemMenu;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.40219.415")]
    public class UIItemMenu1 : WpfMenu
    {
        
        public UIItemMenu1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.WindowTitles.Add("demo – Spread Sheet");
            #endregion
        }
        
        #region Properties
        public UIFileMenuItem1 UIFileMenuItem
        {
            get
            {
                if ((this.mUIFileMenuItem == null))
                {
                    this.mUIFileMenuItem = new UIFileMenuItem1(this);
                }
                return this.mUIFileMenuItem;
            }
        }
        #endregion
        
        #region Fields
        private UIFileMenuItem1 mUIFileMenuItem;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.40219.415")]
    public class UIFileMenuItem1 : WpfMenuItem
    {
        
        public UIFileMenuItem1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfMenuItem.PropertyNames.Name] = "File";
            this.WindowTitles.Add("demo – Spread Sheet");
            #endregion
        }
        
        #region Properties
        public WpfMenuItem UICloseMenuItem
        {
            get
            {
                if ((this.mUICloseMenuItem == null))
                {
                    this.mUICloseMenuItem = new WpfMenuItem(this);
                    #region Search Criteria
                    this.mUICloseMenuItem.SearchProperties[WpfMenuItem.PropertyNames.Name] = "Close";
                    this.mUICloseMenuItem.SearchConfigurations.Add(SearchConfiguration.ExpandWhileSearching);
                    this.mUICloseMenuItem.WindowTitles.Add("demo – Spread Sheet");
                    #endregion
                }
                return this.mUICloseMenuItem;
            }
        }
        #endregion
        
        #region Fields
        private WpfMenuItem mUICloseMenuItem;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.40219.415")]
    public class UIDemoSpreadSheetWindow1 : WinWindow
    {
        
        public UIDemoSpreadSheetWindow1()
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.Name] = "demo – Spread Sheet";
            this.SearchProperties[WinWindow.PropertyNames.ClassName] = "#32770";
            this.WindowTitles.Add("demo – Spread Sheet");
            #endregion
        }
        
        #region Properties
        public UINOWindow UINOWindow
        {
            get
            {
                if ((this.mUINOWindow == null))
                {
                    this.mUINOWindow = new UINOWindow(this);
                }
                return this.mUINOWindow;
            }
        }
        #endregion
        
        #region Fields
        private UINOWindow mUINOWindow;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.40219.415")]
    public class UINOWindow : WinWindow
    {
        
        public UINOWindow(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlId] = "7";
            this.WindowTitles.Add("demo – Spread Sheet");
            #endregion
        }
        
        #region Properties
        public WinButton UINOButton
        {
            get
            {
                if ((this.mUINOButton == null))
                {
                    this.mUINOButton = new WinButton(this);
                    #region Search Criteria
                    this.mUINOButton.SearchProperties[WinButton.PropertyNames.Name] = "No";
                    this.mUINOButton.WindowTitles.Add("demo – Spread Sheet");
                    #endregion
                }
                return this.mUINOButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUINOButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.40219.415")]
    public class UITestSpreadSheetWindow : WpfWindow
    {
        
        public UITestSpreadSheetWindow()
        {
            #region Search Criteria
            this.SearchProperties[WpfWindow.PropertyNames.Name] = "test – Spread Sheet";
            this.SearchProperties.Add(new PropertyExpression(WpfWindow.PropertyNames.ClassName, "HwndWrapper", PropertyExpressionOperator.Contains));
            this.WindowTitles.Add("test – Spread Sheet");
            #endregion
        }
        
        #region Properties
        public UIItemMenu2 UIItemMenu
        {
            get
            {
                if ((this.mUIItemMenu == null))
                {
                    this.mUIItemMenu = new UIItemMenu2(this);
                }
                return this.mUIItemMenu;
            }
        }
        #endregion
        
        #region Fields
        private UIItemMenu2 mUIItemMenu;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.40219.415")]
    public class UIItemMenu2 : WpfMenu
    {
        
        public UIItemMenu2(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.WindowTitles.Add("test – Spread Sheet");
            #endregion
        }
        
        #region Properties
        public UIFileMenuItem2 UIFileMenuItem
        {
            get
            {
                if ((this.mUIFileMenuItem == null))
                {
                    this.mUIFileMenuItem = new UIFileMenuItem2(this);
                }
                return this.mUIFileMenuItem;
            }
        }
        
        public WpfMenuItem UIHelpMenuItem
        {
            get
            {
                if ((this.mUIHelpMenuItem == null))
                {
                    this.mUIHelpMenuItem = new WpfMenuItem(this);
                    #region Search Criteria
                    this.mUIHelpMenuItem.SearchProperties[WpfMenuItem.PropertyNames.Name] = "Help…";
                    this.mUIHelpMenuItem.WindowTitles.Add("test – Spread Sheet");
                    #endregion
                }
                return this.mUIHelpMenuItem;
            }
        }
        #endregion
        
        #region Fields
        private UIFileMenuItem2 mUIFileMenuItem;
        
        private WpfMenuItem mUIHelpMenuItem;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.40219.415")]
    public class UIFileMenuItem2 : WpfMenuItem
    {
        
        public UIFileMenuItem2(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfMenuItem.PropertyNames.Name] = "File";
            this.WindowTitles.Add("test – Spread Sheet");
            #endregion
        }
        
        #region Properties
        public WpfMenuItem UISaveAsMenuItem
        {
            get
            {
                if ((this.mUISaveAsMenuItem == null))
                {
                    this.mUISaveAsMenuItem = new WpfMenuItem(this);
                    #region Search Criteria
                    this.mUISaveAsMenuItem.SearchProperties[WpfMenuItem.PropertyNames.Name] = "Save As…";
                    this.mUISaveAsMenuItem.SearchConfigurations.Add(SearchConfiguration.ExpandWhileSearching);
                    this.mUISaveAsMenuItem.WindowTitles.Add("test – Spread Sheet");
                    #endregion
                }
                return this.mUISaveAsMenuItem;
            }
        }
        
        public WpfMenuItem UICloseMenuItem
        {
            get
            {
                if ((this.mUICloseMenuItem == null))
                {
                    this.mUICloseMenuItem = new WpfMenuItem(this);
                    #region Search Criteria
                    this.mUICloseMenuItem.SearchProperties[WpfMenuItem.PropertyNames.Name] = "Close";
                    this.mUICloseMenuItem.SearchConfigurations.Add(SearchConfiguration.ExpandWhileSearching);
                    this.mUICloseMenuItem.WindowTitles.Add("test – Spread Sheet");
                    #endregion
                }
                return this.mUICloseMenuItem;
            }
        }
        #endregion
        
        #region Fields
        private WpfMenuItem mUISaveAsMenuItem;
        
        private WpfMenuItem mUICloseMenuItem;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.40219.415")]
    public class UISaveAsWindow : WinWindow
    {
        
        public UISaveAsWindow()
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.Name] = "Save As";
            this.SearchProperties[WinWindow.PropertyNames.ClassName] = "#32770";
            this.WindowTitles.Add("Save As");
            #endregion
        }
        
        #region Properties
        public UIDetailsPanePane UIDetailsPanePane
        {
            get
            {
                if ((this.mUIDetailsPanePane == null))
                {
                    this.mUIDetailsPanePane = new UIDetailsPanePane(this);
                }
                return this.mUIDetailsPanePane;
            }
        }
        
        public UIItemWindow2 UIItemWindow
        {
            get
            {
                if ((this.mUIItemWindow == null))
                {
                    this.mUIItemWindow = new UIItemWindow2(this);
                }
                return this.mUIItemWindow;
            }
        }
        #endregion
        
        #region Fields
        private UIDetailsPanePane mUIDetailsPanePane;
        
        private UIItemWindow2 mUIItemWindow;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.40219.415")]
    public class UIDetailsPanePane : WinPane
    {
        
        public UIDetailsPanePane(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinControl.PropertyNames.Name] = "Details Pane";
            this.WindowTitles.Add("Save As");
            #endregion
        }
        
        #region Properties
        public WinComboBox UIFilenameComboBox
        {
            get
            {
                if ((this.mUIFilenameComboBox == null))
                {
                    this.mUIFilenameComboBox = new WinComboBox(this);
                    #region Search Criteria
                    this.mUIFilenameComboBox.SearchProperties[WinComboBox.PropertyNames.Name] = "File name:";
                    this.mUIFilenameComboBox.WindowTitles.Add("Save As");
                    #endregion
                }
                return this.mUIFilenameComboBox;
            }
        }
        #endregion
        
        #region Fields
        private WinComboBox mUIFilenameComboBox;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.40219.415")]
    public class UIItemWindow2 : WinWindow
    {
        
        public UIItemWindow2(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlId] = "1001";
            this.WindowTitles.Add("Save As");
            #endregion
        }
        
        #region Properties
        public WinEdit UIFilenameEdit
        {
            get
            {
                if ((this.mUIFilenameEdit == null))
                {
                    this.mUIFilenameEdit = new WinEdit(this);
                    #region Search Criteria
                    this.mUIFilenameEdit.SearchProperties[WinEdit.PropertyNames.Name] = "File name:";
                    this.mUIFilenameEdit.WindowTitles.Add("Save As");
                    #endregion
                }
                return this.mUIFilenameEdit;
            }
        }
        #endregion
        
        #region Fields
        private WinEdit mUIFilenameEdit;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.40219.415")]
    public class UIYesWindow : WinWindow
    {
        
        public UIYesWindow()
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.Name] = "&Yes";
            this.SearchProperties[WinWindow.PropertyNames.ClassName] = "Button";
            this.WindowTitles.Add("&Yes");
            #endregion
        }
        
        #region Properties
        public WinButton UIYesButton
        {
            get
            {
                if ((this.mUIYesButton == null))
                {
                    this.mUIYesButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIYesButton.SearchProperties[WinButton.PropertyNames.Name] = "Yes";
                    this.mUIYesButton.WindowTitles.Add("&Yes");
                    #endregion
                }
                return this.mUIYesButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUIYesButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.40219.415")]
    public class UIHelpWindow : WpfWindow
    {
        
        public UIHelpWindow()
        {
            #region Search Criteria
            this.SearchProperties[WpfWindow.PropertyNames.Name] = "Help";
            this.SearchProperties.Add(new PropertyExpression(WpfWindow.PropertyNames.ClassName, "HwndWrapper", PropertyExpressionOperator.Contains));
            this.WindowTitles.Add("Help");
            #endregion
        }
        
        #region Properties
        public WpfButton UIOKButton
        {
            get
            {
                if ((this.mUIOKButton == null))
                {
                    this.mUIOKButton = new WpfButton(this);
                    #region Search Criteria
                    this.mUIOKButton.SearchProperties[WpfButton.PropertyNames.Name] = "OK";
                    this.mUIOKButton.WindowTitles.Add("Help");
                    #endregion
                }
                return this.mUIOKButton;
            }
        }
        #endregion
        
        #region Fields
        private WpfButton mUIOKButton;
        #endregion
    }
}
